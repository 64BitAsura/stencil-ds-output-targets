name: 'Output Targets Build'

on:
  workflow_dispatch:
    inputs:
      package:
        required: true
        type: choice
        description: Which package should be published?
        options:
          - vue
          - angular
          - react
      version:
        required: true
        type: choice
        description: Which version should be published?
        options:
          - patch
          - minor
          - major

jobs:
  prod-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prod-build.outputs.version }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version-file: './package.json'
      - name: Install Dependencies
        run: npm ci && lerna bootstrap --ignore-scripts -- --legacy-peer-deps
        shell: bash
      - name: Prepare NPM Token
        run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
        shell: bash
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish Package
        uses: ./.github/workflows/actions/publish-npm
        with:
          version: ${{ inputs.version }} # "patch", "minor", "major"
          tag: "dev"
          preid: "dev.${{}}" # Unnecessary for development builds because we're only letting people try patch, minor, or major
          scope: "@stencil/${{ inputs.package }}-output-target"
          # Look at package.json's name
          # Coupled to project structure. Update this when adding a new output target.
          # Examples: vue-output-target, angular-output-target, react-output-target
          working-directory: "./packages/${{ inputs.package }}-output-target" # Follow the repo structure
          token: ${{ secrets.NPM_TOKEN }} # Private, accessible by team leads


jobs:
  dev-build:
    # runs-on: ubuntu-latest
    # outputs:
    #   version: ${{ steps.dev-build.outputs.version }}
    # steps:
    #   - name: Checkout Code
    #     uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
    #   - uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
    #     with:
    #       node-version-file: './package.json'
    #   - name: Install Dependencies
    #     run: npm ci && lerna bootstrap --ignore-scripts -- --legacy-peer-deps
    #     shell: bash
    #   - name: Prepare NPM Token
    #     run: echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
    #     shell: bash
    #     env:
    #       NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      # A 1 is required before the timestamp
      # as lerna will fail when there is a leading 0
      # See https://github.com/lerna/lerna/issues/2840
      - name: Create Dev Hash
        run: |
          echo "HASH=1${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "TIMESTAMP=1$(date +%s)" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$(node ./.scripts/bump-version.js)" >> $GITHUB_ENV
        shell: bash
      - name: Create Dev Build
        run: |
          HUSKY_SKIP_HOOKS=1 lerna publish $(echo "${{ env.CURRENT_VERSION }}")-dev.$(echo "${{ env.TIMESTAMP }}").$(echo "${{ env.HASH }}") --no-verify-access --yes --force-publish='*' --dist-tag dev --no-git-tag-version --no-push --exact
        shell: bash
      - id: dev-build
        run: echo "::set-output name=version::$(echo "${{ env.CURRENT_VERSION }}")-dev.$(echo "${{ env.TIMESTAMP }}").$(echo "${{ env.HASH }}")"
  get-build:
    name: Get your dev build!
    runs-on: ubuntu-latest
    needs: dev-build
    steps:
      - run: echo ${{ needs.dev-build.outputs.version }}
